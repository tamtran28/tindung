import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
import os # M·∫∑c d√π kh√¥ng d√πng tr·ª±c ti·∫øp trong logic Streamlit, gi·ªØ l·∫°i n·∫øu c√≥ h√†m ph·ª• thu·ªôc

# Thi·∫øt l·∫≠p trang r·ªông h∆°n
st.set_page_config(layout="wide")

# H√†m h·ªó tr·ª£ (n·∫øu c√≥, v√≠ d·ª•: contains_any, nh∆∞ng kh√¥ng th·∫•y d√πng trong script m·ªõi)

@st.cache_data # Cache ƒë·ªÉ tƒÉng t·ªëc ƒë·ªô khi t·∫£i l·∫°i m√† file kh√¥ng ƒë·ªïi
def load_excel(uploaded_file_obj):
    """H√†m t·∫£i v√† ƒë·ªçc file Excel."""
    if uploaded_file_obj is not None:
        try:
            # Th·ª≠ ƒë·ªçc v·ªõi engine m·∫∑c ƒë·ªãnh, n·∫øu l·ªói th√¨ th·ª≠ 'openpyxl' cho .xlsx v√† 'xlrd' cho .xls
            file_name = uploaded_file_obj.name
            if file_name.endswith('.xlsx'):
                return pd.read_excel(uploaded_file_obj, engine='openpyxl')
            elif file_name.endswith('.xls'):
                # ƒê·ªëi v·ªõi file .xls, xlrd c√≥ th·ªÉ c·∫ßn thi·∫øt n·∫øu pandas kh√¥ng t·ª± x·ª≠ l√Ω ƒë∆∞·ª£c
                # Tuy nhi√™n, pandas phi√™n b·∫£n m·ªõi h∆°n th∆∞·ªùng x·ª≠ l√Ω t·ªët .xls
                try:
                    # C·ªë g·∫Øng ƒë·ªçc .xls m√† kh√¥ng ch·ªâ ƒë·ªãnh engine tr∆∞·ªõc, pandas s·∫Ω t·ª± ch·ªçn
                    return pd.read_excel(uploaded_file_obj)
                except Exception as e_xls:
                    st.warning(f"L·ªói khi ƒë·ªçc file .xls {file_name} v·ªõi engine m·∫∑c ƒë·ªãnh: {e_xls}. Th·ª≠ v·ªõi xlrd...")
                    try:
                        return pd.read_excel(uploaded_file_obj, engine='xlrd')
                    except Exception as e_xlrd:
                        st.error(f"Kh√¥ng th·ªÉ ƒë·ªçc file .xls {file_name} v·ªõi xlrd: {e_xlrd}")
                        return None
            else: # Cho c√°c tr∆∞·ªùng h·ª£p kh√°c, ho·∫∑c n·∫øu file kh√¥ng c√≥ ƒëu√¥i c·ª• th·ªÉ
                return pd.read_excel(uploaded_file_obj)
        except Exception as e:
            st.error(f"L·ªói khi ƒë·ªçc file {uploaded_file_obj.name}: {e}")
            return None
    return None

@st.cache_data
def load_multiple_excel(uploaded_file_objs):
    """H√†m t·∫£i v√† ƒë·ªçc nhi·ªÅu file Excel, sau ƒë√≥ gh√©p l·∫°i."""
    if uploaded_file_objs:
        df_list = []
        for file_obj in uploaded_file_objs:
            df = load_excel(file_obj)
            if df is not None:
                df_list.append(df)
        if df_list:
            try:
                return pd.concat(df_list, ignore_index=True)
            except Exception as e:
                st.error(f"L·ªói khi gh√©p c√°c file Excel: {e}")
                return None
    return None

def process_crm_data(
    df_crm4_raw, df_crm32_raw, df_muc_dich_data, df_code_tsbd_data,
    df_sol_data, df_giai_ngan_data, df_55_data, df_56_data, df_delay_data,
    chi_nhanh_filter, dia_ban_kt_filter
):
    """
    H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£ d·ªØ li·ªáu CRM.
    """
    # T·∫°o b·∫£n sao ƒë·ªÉ tr√°nh thay ƒë·ªïi d·ªØ li·ªáu g·ªëc
    df_crm4 = df_crm4_raw.copy() if df_crm4_raw is not None else None
    df_crm32 = df_crm32_raw.copy() if df_crm32_raw is not None else None
    # C√°c DataFrame kh√°c c≈©ng n√™n ƒë∆∞·ª£c copy n·∫øu ch√∫ng ƒë∆∞·ª£c s·ª≠a ƒë·ªïi
    # df_muc_dich_file = df_muc_dich_data.copy() if df_muc_dich_data is not None else None
    # ... (t∆∞∆°ng t·ª± cho c√°c df kh√°c)

    if df_crm4 is None or df_crm32 is None:
        st.error("D·ªØ li·ªáu CRM4 ho·∫∑c CRM32 ch∆∞a ƒë∆∞·ª£c t·∫£i l√™n ho·∫∑c b·ªã l·ªói.")
        return None # Tr·∫£ v·ªÅ None ho·∫∑c m·ªôt b·ªô gi√° tr·ªã r·ªóng t√πy theo c√°ch x·ª≠ l√Ω l·ªói

    st.info(f"B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu cho chi nh√°nh: '{chi_nhanh_filter}' v√† ƒë·ªãa b√†n ki·ªÉm to√°n: '{dia_ban_kt_filter}'")

    # ‚úÖ L·ªçc d·ªØ li·ªáu theo BRCD ch·ª©a chu·ªói nh·∫≠p v√†o
    df_crm4_filtered = df_crm4[df_crm4['BRANCH_VAY'].astype(str).str.upper().str.contains(chi_nhanh_filter)]
    df_crm32_filtered = df_crm32[df_crm32['BRCD'].astype(str).str.upper().str.contains(chi_nhanh_filter)]

    st.write(f"üìå S·ªë d√≤ng CRM4 sau khi l·ªçc theo chi nh√°nh '{chi_nhanh_filter}': {len(df_crm4_filtered)}")
    st.write(f"üìå S·ªë d√≤ng CRM32 sau khi l·ªçc theo chi nh√°nh '{chi_nhanh_filter}': {len(df_crm32_filtered)}")


    # X·ª≠ l√Ω df_code_tsbd (ƒë·ªïi t√™n t·ª´ df_code_tsbd_file)
    # Gi·∫£ s·ª≠ c·ªôt ch·ª©a code l√† 'CODE CAP 2' v√† m√£ ph√¢n lo·∫°i l√† 'CODE'
    # C·∫ßn ƒë·∫£m b·∫£o df_code_tsbd_data kh√¥ng None
    if df_code_tsbd_data is None:
        st.error("File CODE_LOAI TSBD ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c l·ªói.")
        return None
    df_code_tsbd = df_code_tsbd_data[['CODE CAP 2', 'CODE']].copy() # S·ª≠ d·ª•ng copy
    df_code_tsbd.columns = ['CAP_2', 'LOAI_TS']

    # 1. T·∫°o b·∫£n sao nh·ªè g·ªçn t·ª´ df_code_tsbd ch·ªâ l·∫•y 2 c·ªôt c·∫ßn d√πng
    df_tsbd_code = df_code_tsbd[['CAP_2', 'LOAI_TS']].drop_duplicates()

    # 2. Merge ƒë·ªÉ l·∫•y LOAI_TS v√†o df_crm4_filtered
    df_crm4_filtered = df_crm4_filtered.merge(df_tsbd_code, how='left', on='CAP_2')

    # 3. G√°n 'Kh√¥ng TS' n·∫øu CAP_2 r·ªóng ho·∫∑c NaN
    df_crm4_filtered['LOAI_TS'] = df_crm4_filtered.apply(
        lambda row: 'Kh√¥ng TS' if pd.isna(row['CAP_2']) or str(row['CAP_2']).strip() == '' else row['LOAI_TS'],
        axis=1
    )

    # 4. Ghi ch√∫ 'M·ªöI' n·∫øu CAP_2 c√≥ nh∆∞ng LOAI_TS v·∫´n NaN (kh√¥ng kh·ªõp trong b·∫£ng m√£)
    df_crm4_filtered['GHI_CHU_TSBD'] = df_crm4_filtered.apply(
        lambda row: 'M·ªöI' if pd.notna(row['CAP_2']) and str(row['CAP_2']).strip() != '' and pd.isna(row['LOAI_TS']) else '',
        axis=1
    )
    df_vay_4 = df_crm4_filtered.copy()
    # B·ªè c√°c d√≤ng c√≥ LOAI l√† "Bao lanh" ho·∫∑c "LC"
    df_vay = df_vay_4[~df_vay_4['LOAI'].isin(['Bao lanh', 'LC'])]
    
    if not df_vay.empty:
        pivot_ts = df_vay.pivot_table(
            index='CIF_KH_VAY',
            columns='LOAI_TS',
            values='TS_KW_VND',
            aggfunc='sum',
            fill_value=0
        ).add_suffix(' (Gi√° tr·ªã TS)').reset_index()

        pivot_no = df_vay.pivot_table(
            index='CIF_KH_VAY',
            columns='LOAI_TS',
            values='DU_NO_PHAN_BO_QUY_DOI',
            aggfunc='sum',
            fill_value=0
        ).reset_index() # Kh√¥ng add suffix ·ªü ƒë√¢y
        
        pivot_merge = pivot_no.merge(pivot_ts, on='CIF_KH_VAY', how='left')
        
        # T√≠nh t·ªïng gi√° tr·ªã TS v√† d∆∞ n·ª£
        # L·∫•y c√°c c·ªôt gi√° tr·ªã TS (c√≥ suffix)
        ts_value_cols = [col for col in pivot_ts.columns if col.endswith(' (Gi√° tr·ªã TS)') and col != 'CIF_KH_VAY (Gi√° tr·ªã TS)']
        pivot_merge['GI√Å TR·ªä TS'] = pivot_ts[ts_value_cols].sum(axis=1)
        
        # L·∫•y c√°c c·ªôt d∆∞ n·ª£ (kh√¥ng c√≥ suffix, kh√¥ng ph·∫£i CIF)
        du_no_cols = [col for col in pivot_no.columns if col != 'CIF_KH_VAY']
        pivot_merge['D∆Ø N·ª¢'] = pivot_no[du_no_cols].sum(axis=1)

    else: # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p df_vay r·ªóng
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu 'Cho vay' sau khi l·ªçc, b·∫£ng pivot c√≥ th·ªÉ r·ªóng ho·∫∑c l·ªói.")
        # T·∫°o pivot_merge r·ªóng v·ªõi c√°c c·ªôt c·∫ßn thi·∫øt ƒë·ªÉ tr√°nh l·ªói sau n√†y
        pivot_merge = pd.DataFrame(columns=['CIF_KH_VAY', 'GI√Å TR·ªä TS', 'D∆Ø N·ª¢'])


    df_info = df_crm4_filtered[['CIF_KH_VAY', 'TEN_KH_VAY', 'CUSTTPCD', 'NHOM_NO']].drop_duplicates(subset='CIF_KH_VAY')
    pivot_final = df_info.merge(pivot_merge, on='CIF_KH_VAY', how='left')
    pivot_final = pivot_final.reset_index().rename(columns={'index': 'STT'})
    pivot_final['STT'] += 1

    # S·∫Øp x·∫øp c·ªôt cho pivot_final
    # L·∫•y c√°c c·ªôt d∆∞ n·ª£ t·ª´ pivot_merge (kh√¥ng ph·∫£i CIF, GI√Å TR·ªä TS, D∆Ø N·ª¢ v√† kh√¥ng ph·∫£i c·ªôt gi√° tr·ªã TS)
    du_no_pivot_cols = [col for col in pivot_merge.columns if col not in ['CIF_KH_VAY', 'GI√Å TR·ªä TS', 'D∆Ø N·ª¢'] and '(Gi√° tr·ªã TS)' not in col]
    # L·∫•y c√°c c·ªôt gi√° tr·ªã TS t·ª´ pivot_merge
    ts_value_pivot_cols = [col for col in pivot_merge.columns if '(Gi√° tr·ªã TS)' in col and col != 'CIF_KH_VAY']


    cols_order = ['STT', 'CUSTTPCD', 'CIF_KH_VAY', 'TEN_KH_VAY', 'NHOM_NO'] + \
                 sorted(du_no_pivot_cols) + \
                 sorted(ts_value_pivot_cols) + \
                 ['D∆Ø N·ª¢', 'GI√Å TR·ªä TS']
    
    # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c c·ªôt trong cols_order ƒë·ªÅu t·ªìn t·∫°i trong pivot_final
    cols_order_existing = [col for col in cols_order if col in pivot_final.columns]
    pivot_final = pivot_final[cols_order_existing]


    # X·ª≠ l√Ω CRM32
    df_crm32_filtered = df_crm32_filtered.copy() # ƒê·∫£m b·∫£o l√†m vi·ªác tr√™n b·∫£n sao
    df_crm32_filtered['MA_PHE_DUYET'] = df_crm32_filtered['CAP_PHE_DUYET'].astype(str).str.split('-').str[0].str.strip().str.zfill(2)
    ma_cap_c = [f"{i:02d}" for i in range(1, 8)] + [f"{i:02d}" for i in range(28, 32)]
    list_cif_cap_c = df_crm32_filtered[df_crm32_filtered['MA_PHE_DUYET'].isin(ma_cap_c)]['CUSTSEQLN'].unique().astype(str)


    list_co_cau = ['ACOV1', 'ACOV3', 'ATT01', 'ATT02', 'ATT03', 'ATT04',
                   'BCOV1', 'BCOV2', 'BTT01', 'BTT02', 'BTT03',
                   'CCOV2', 'CCOV3', 'CTT03', 'RCOV3', 'RTT03']
    cif_co_cau = df_crm32_filtered[df_crm32_filtered['SCHEME_CODE'].isin(list_co_cau)]['CUSTSEQLN'].unique().astype(str)


    # X·ª≠ l√Ω df_muc_dich (ƒë·ªïi t√™n t·ª´ df_muc_dich_file)
    if df_muc_dich_data is None:
        st.error("File CODE_MDSDV4 ch∆∞a ƒë∆∞·ª£c t·∫£i ho·∫∑c l·ªói.")
        return None
    df_muc_dich_vay_src = df_muc_dich_data[['CODE_MDSDV4', 'GROUP']].copy() # S·ª≠ d·ª•ng copy
    df_muc_dich_vay_src.columns = ['MUC_DICH_VAY_CAP_4', 'MUC DICH']
    df_muc_dich_map = df_muc_dich_vay_src[['MUC_DICH_VAY_CAP_4', 'MUC DICH']].drop_duplicates()

    df_crm32_filtered = df_crm32_filtered.merge(df_muc_dich_map, how='left', on='MUC_DICH_VAY_CAP_4')
    df_crm32_filtered['MUC DICH'] = df_crm32_filtered['MUC DICH'].fillna('(blank)')
    df_crm32_filtered['GHI_CHU_MUC_DICH'] = df_crm32_filtered.apply( # ƒê·ªïi t√™n c·ªôt ghi ch√∫ ƒë·ªÉ tr√°nh tr√πng
        lambda row: 'M·ªöI' if pd.notna(row['MUC_DICH_VAY_CAP_4']) and str(row['MUC_DICH_VAY_CAP_4']).strip() != '' and pd.isna(row['MUC DICH']) and row['MUC DICH'] == '(blank)' else '',
        axis=1
    )
    pivot_mucdich = df_crm32_filtered.pivot_table(
        index='CUSTSEQLN',
        columns='MUC DICH',
        values='DU_NO_QUY_DOI',
        aggfunc='sum',
        fill_value=0
    ).reset_index()
    # T√≠nh t·ªïng d∆∞ n·ª£ CRM32 t·ª´ c√°c c·ªôt m·ª•c ƒë√≠ch
    muc_dich_cols_for_sum = [col for col in pivot_mucdich.columns if col != 'CUSTSEQLN']
    pivot_mucdich['D∆Ø N·ª¢ CRM32'] = pivot_mucdich[muc_dich_cols_for_sum].sum(axis=1)

    # ƒê·∫£m b·∫£o CUSTSEQLN trong pivot_mucdich l√† string tr∆∞·ªõc khi rename v√† merge
    pivot_mucdich['CUSTSEQLN'] = pivot_mucdich['CUSTSEQLN'].astype(str).str.strip()
    pivot_final_CRM32 = pivot_mucdich.rename(columns={'CUSTSEQLN': 'CIF_KH_VAY'})
    
    # ƒê·∫£m b·∫£o CIF_KH_VAY trong pivot_final l√† string
    pivot_final['CIF_KH_VAY'] = pivot_final['CIF_KH_VAY'].astype(str).str.strip()
    pivot_full = pivot_final.merge(pivot_final_CRM32, on='CIF_KH_VAY', how='left')
    pivot_full.fillna(0, inplace=True) # Fill NaN b·∫±ng 0 sau khi merge

    # X·ª≠ l√Ω l·ªách d∆∞ n·ª£ v√† (blank)
    pivot_full['LECH'] = pivot_full['D∆Ø N·ª¢'] - pivot_full.get('D∆Ø N·ª¢ CRM32', 0) # S·ª≠ d·ª•ng .get ƒë·ªÉ tr√°nh l·ªói n·∫øu c·ªôt kh√¥ng t·ªìn t·∫°i
    pivot_full['LECH'] = pivot_full['LECH'].fillna(0)
    cif_lech = pivot_full[pivot_full['LECH'] != 0]['CIF_KH_VAY'].unique() # cif_lech s·∫Ω l√† array of strings
    
    df_crm4_blank = df_crm4_filtered[~df_crm4_filtered['LOAI'].isin(['Cho vay', 'Bao lanh', 'LC'])].copy()
    # ƒê·∫£m b·∫£o CIF_KH_VAY trong df_crm4_blank l√† string
    df_crm4_blank['CIF_KH_VAY'] = df_crm4_blank['CIF_KH_VAY'].astype(str).str.strip()

    if not df_crm4_blank.empty and cif_lech.size > 0 :
        du_no_bosung = (
            df_crm4_blank[df_crm4_blank['CIF_KH_VAY'].isin(cif_lech)] # isin s·∫Ω ho·∫°t ƒë·ªông ƒë√∫ng v·ªõi string arrays
            .groupby('CIF_KH_VAY', as_index=False)['DU_NO_PHAN_BO_QUY_DOI']
            .sum()
            .rename(columns={'DU_NO_PHAN_BO_QUY_DOI': '(blank)'})
        )
        # ƒê·∫£m b·∫£o CIF_KH_VAY trong du_no_bosung l√† string
        du_no_bosung['CIF_KH_VAY'] = du_no_bosung['CIF_KH_VAY'].astype(str).str.strip()
        pivot_full = pivot_full.merge(du_no_bosung, on='CIF_KH_VAY', how='left')
        pivot_full['(blank)'] = pivot_full['(blank)'].fillna(0)
        pivot_full['D∆Ø N·ª¢ CRM32'] = pivot_full.get('D∆Ø N·ª¢ CRM32', 0) + pivot_full['(blank)']
    else:
        pivot_full['(blank)'] = 0 # N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu b·ªï sung, c·ªôt (blank) l√† 0

    # S·∫Øp x·∫øp l·∫°i c·ªôt (blank)
    cols = list(pivot_full.columns)
    if '(blank)' in cols and 'D∆Ø N·ª¢ CRM32' in cols:
        cols.insert(cols.index('D∆Ø N·ª¢ CRM32'), cols.pop(cols.index('(blank)')))
        pivot_full = pivot_full[cols]
    
    pivot_full['LECH'] = pivot_full['D∆Ø N·ª¢'] - pivot_full.get('D∆Ø N·ª¢ CRM32',0) # C·∫≠p nh·∫≠t l·∫°i l·ªách

    # C√°c flag kh√°c
    pivot_full['NHOM_NO'] = pivot_full['NHOM_NO'].astype(str) # ƒê·∫£m b·∫£o NHOM_NO l√† string ƒë·ªÉ so s√°nh
    pivot_full['N·ª£ nh√≥m 2'] = pivot_full['NHOM_NO'].apply(lambda x: 'x' if x.strip() == '2' or x.strip() == '2.0' else '')
    pivot_full['N·ª£ x·∫•u'] = pivot_full['NHOM_NO'].apply(lambda x: 'x' if x.strip() in ['3', '4', '5', '3.0', '4.0', '5.0'] else '')
    
    pivot_full['CIF_KH_VAY'] = pivot_full['CIF_KH_VAY'].astype(str).str.strip() # ƒê√£ l√†m ·ªü tr√™n nh∆∞ng ch·∫Øc ch·∫Øn l·∫°i
    list_cif_cap_c_str = [str(c).strip() for c in list_cif_cap_c]
    cif_co_cau_str = [str(c).strip() for c in cif_co_cau]

    pivot_full['Chuy√™n gia PD c·∫•p C duy·ªát'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in list_cif_cap_c_str else '')
    pivot_full['N·ª¢ C∆†_C·∫§U'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in cif_co_cau_str else '')


    # D∆∞ n·ª£ b·∫£o l√£nh v√† LC
    df_baolanh = df_crm4_filtered[df_crm4_filtered['LOAI'] == 'Bao lanh'].copy()
    df_lc = df_crm4_filtered[df_crm4_filtered['LOAI'] == 'LC'].copy()
    
    # ƒê·∫£m b·∫£o CIF_KH_VAY l√† string tr∆∞·ªõc khi groupby
    df_baolanh['CIF_KH_VAY'] = df_baolanh['CIF_KH_VAY'].astype(str).str.strip()
    df_lc['CIF_KH_VAY'] = df_lc['CIF_KH_VAY'].astype(str).str.strip()

    df_baolanh_sum = df_baolanh.groupby('CIF_KH_VAY', as_index=False)['DU_NO_PHAN_BO_QUY_DOI'].sum().rename(columns={'DU_NO_PHAN_BO_QUY_DOI': 'D∆Ø_N·ª¢_B·∫¢O_L√ÉNH'})
    df_lc_sum = df_lc.groupby('CIF_KH_VAY', as_index=False)['DU_NO_PHAN_BO_QUY_DOI'].sum().rename(columns={'DU_NO_PHAN_BO_QUY_DOI': 'D∆Ø_N·ª¢_LC'})

    pivot_full = pivot_full.merge(df_baolanh_sum, on='CIF_KH_VAY', how='left')
    pivot_full = pivot_full.merge(df_lc_sum, on='CIF_KH_VAY', how='left')
    pivot_full['D∆Ø_N·ª¢_B·∫¢O_L√ÉNH'] = pivot_full['D∆Ø_N·ª¢_B·∫¢O_L√ÉNH'].fillna(0)
    pivot_full['D∆Ø_N·ª¢_LC'] = pivot_full['D∆Ø_N·ª¢_LC'].fillna(0)

    # Gi·∫£i ng√¢n ti·ªÅn m·∫∑t
    if df_giai_ngan_data is not None:
        df_giai_ngan = df_giai_ngan_data.copy()
        df_crm32_filtered['KHE_UOC'] = df_crm32_filtered['KHE_UOC'].astype(str).str.strip()
        df_crm32_filtered['CUSTSEQLN'] = df_crm32_filtered['CUSTSEQLN'].astype(str).str.strip()
        df_giai_ngan['FORACID'] = df_giai_ngan['FORACID'].astype(str).str.strip()
        # pivot_full['CIF_KH_VAY'] ƒë√£ l√† string

        df_match_gn = df_crm32_filtered[df_crm32_filtered['KHE_UOC'].isin(df_giai_ngan['FORACID'])].copy()
        ds_cif_tien_mat = df_match_gn['CUSTSEQLN'].unique() # ƒê√¢y l√† array of strings
        pivot_full['GI·∫¢I_NG√ÇN_TIEN_MAT'] = pivot_full['CIF_KH_VAY'].isin(ds_cif_tien_mat).map({True: 'x', False: ''})
    else:
        pivot_full['GI·∫¢I_NG√ÇN_TIEN_MAT'] = ''
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu gi·∫£i ng√¢n ti·ªÅn m·∫∑t ƒë·ªÉ x·ª≠ l√Ω.")

    # C·∫ßm c·ªë TCTD kh√°c
    df_crm4_filtered['CAP_2'] = df_crm4_filtered['CAP_2'].astype(str) # ƒê·∫£m b·∫£o CAP_2 l√† string
    df_cc_tctd = df_crm4_filtered[df_crm4_filtered['CAP_2'].str.contains('TCTD', case=False, na=False)].copy()
    df_cc_tctd['CIF_KH_VAY'] = df_cc_tctd['CIF_KH_VAY'].astype(str).str.strip()
    df_cc_flag = df_cc_tctd[['CIF_KH_VAY']].drop_duplicates()
    df_cc_flag['C·∫ßm c·ªë t·∫°i TCTD kh√°c'] = 'x'
    pivot_full = pivot_full.merge(df_cc_flag, on='CIF_KH_VAY', how='left')
    pivot_full['C·∫ßm c·ªë t·∫°i TCTD kh√°c'] = pivot_full['C·∫ßm c·ªë t·∫°i TCTD kh√°c'].fillna('')

    # Top 10 KHCN/KHDN
    pivot_full['D∆Ø N·ª¢'] = pd.to_numeric(pivot_full['D∆Ø N·ª¢'], errors='coerce').fillna(0)
    pivot_full['CUSTTPCD'] = pivot_full['CUSTTPCD'].astype(str) # ƒê·∫£m b·∫£o CUSTTPCD l√† string
    
    top10_khcn_cif = pivot_full[pivot_full['CUSTTPCD'].str.strip().str.lower() == 'ca nhan'].nlargest(10, 'D∆Ø N·ª¢')['CIF_KH_VAY'].astype(str).str.strip().values
    pivot_full['Top 10 d∆∞ n·ª£ KHCN'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in top10_khcn_cif else '')

    top10_khdn_cif = pivot_full[pivot_full['CUSTTPCD'].str.strip().str.lower() == 'doanh nghiep'].nlargest(10, 'D∆Ø N·ª¢')['CIF_KH_VAY'].astype(str).str.strip().values
    pivot_full['Top 10 d∆∞ n·ª£ KHDN'] = pivot_full['CIF_KH_VAY'].apply(lambda x: 'x' if x in top10_khdn_cif else '')


    # TSBƒê qu√° h·∫°n ƒë·ªãnh gi√°
    ngay_danh_gia_tsbd = pd.to_datetime("2025-03-31") 
    loai_ts_r34 = ['BƒêS', 'MMTB', 'PTVT'] # ƒê·∫£m b·∫£o c√°c gi√° tr·ªã n√†y kh·ªõp v·ªõi d·ªØ li·ªáu LOAI_TS
    df_crm4_for_tsbd = df_crm4_filtered.copy() 
    df_crm4_for_tsbd['LOAI_TS'] = df_crm4_for_tsbd['LOAI_TS'].astype(str) # ƒê·∫£m b·∫£o LOAI_TS l√† string
    mask_r34 = df_crm4_for_tsbd['LOAI_TS'].isin(loai_ts_r34)
    df_crm4_for_tsbd['VALUATION_DATE'] = pd.to_datetime(df_crm4_for_tsbd['VALUATION_DATE'], errors='coerce')
    
    df_crm4_for_tsbd.loc[mask_r34, 'SO_NGAY_QUA_HAN'] = (
        (ngay_danh_gia_tsbd - df_crm4_for_tsbd.loc[mask_r34, 'VALUATION_DATE']).dt.days - 365
    )
    cif_quahan_series = df_crm4_for_tsbd[
        (df_crm4_for_tsbd['SO_NGAY_QUA_HAN'].notna()) & (df_crm4_for_tsbd['SO_NGAY_QUA_HAN'] > 30)
    ]['CIF_KH_VAY']
    cif_quahan = cif_quahan_series.astype(str).str.strip().unique()

    pivot_full['KH c√≥ TSBƒê qu√° h·∫°n ƒë·ªãnh gi√°'] = pivot_full['CIF_KH_VAY'].apply(
        lambda x: 'x' if x in cif_quahan else ''
    )

    # TSBƒê kh√°c ƒë·ªãa b√†n
    df_bds_matched = pd.DataFrame() # Kh·ªüi t·∫°o df r·ªóng
    if df_sol_data is not None and dia_ban_kt_filter:
        df_sol = df_sol_data.copy()
        # ƒê·∫£m b·∫£o c√°c c·ªôt d√πng ƒë·ªÉ join/isin l√† string
        df_crm4_filtered['SECU_SRL_NUM'] = df_crm4_filtered['SECU_SRL_NUM'].astype(str).str.strip()
        df_sol['C01'] = df_sol['C01'].astype(str).str.strip()
        df_sol['C02'] = df_sol['C02'].astype(str).str.strip()


        ds_secu = df_crm4_filtered['SECU_SRL_NUM'].dropna().unique()
        df_17_filtered = df_sol[df_sol['C01'].isin(ds_secu)]
        df_bds = df_17_filtered[df_17_filtered['C02'] == 'Bat dong san'].copy() # 'Bat dong san' c·∫ßn kh·ªõp ch√≠nh x√°c
        
        # Ch·ªâ gi·ªØ t√†i s·∫£n thu·ªôc Sol ƒë√≥ (c√≥ trong df_crm4_filtered SECU_SRL_NUM)
        df_bds_matched = df_bds[df_bds['C01'].isin(df_crm4_filtered['SECU_SRL_NUM'])].copy()


        def extract_tinh_thanh(diachi):
            if pd.isna(diachi): return ''
            parts = str(diachi).split(',')
            return parts[-1].strip().lower() if parts else ''
        df_bds_matched['TINH_TP_TSBD'] = df_bds_matched['C19'].apply(extract_tinh_thanh)
        df_bds_matched['CANH_BAO_TS_KHAC_DIABAN'] = df_bds_matched['TINH_TP_TSBD'].apply(
            lambda x: 'x' if x and x != dia_ban_kt_filter.strip().lower() else '' # So s√°nh v·ªõi dia_ban_kt_filter ƒë√£ chu·∫©n h√≥a
        )
        ma_ts_canh_bao = df_bds_matched[df_bds_matched['CANH_BAO_TS_KHAC_DIABAN'] == 'x']['C01'].unique()
        
        cif_canh_bao_series = df_crm4_filtered[df_crm4_filtered['SECU_SRL_NUM'].isin(ma_ts_canh_bao)]['CIF_KH_VAY']
        cif_canh_bao = cif_canh_bao_series.astype(str).str.strip().dropna().unique()

        pivot_full['KH c√≥ TSBƒê kh√°c ƒë·ªãa b√†n'] = pivot_full['CIF_KH_VAY'].apply(
            lambda x: 'x' if x in cif_canh_bao else ''
        )
    else:
        pivot_full['KH c√≥ TSBƒê kh√°c ƒë·ªãa b√†n'] = ''
        if df_sol_data is None: st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu M·ª•c 17 (df_sol) ƒë·ªÉ x·ª≠ l√Ω TSBƒê kh√°c ƒë·ªãa b√†n.")
        if not dia_ban_kt_filter: st.warning("Ch∆∞a nh·∫≠p ƒë·ªãa b√†n ki·ªÉm to√°n ƒë·ªÉ x·ª≠ l√Ω TSBƒê kh√°c ƒë·ªãa b√†n.")


    # Giao d·ªãch gi·∫£i ng√¢n/t·∫•t to√°n trong ng√†y
    df_gop = pd.DataFrame() 
    df_count = pd.DataFrame()
    if df_55_data is not None and df_56_data is not None:
        df_tt_raw = df_55_data.copy()
        df_gn_raw = df_56_data.copy()

        df_tt = df_tt_raw[['CUSTSEQLN', 'NMLOC', 'KHE_UOC', 'SOTIENGIAINGAN', 'NGAYGN', 'NGAYDH', 'NGAY_TT', 'LOAITIEN']].copy()
        df_tt.columns = ['CIF', 'TEN_KHACH_HANG', 'KHE_UOC', 'SO_TIEN_GIAI_NGAN_VND', 'NGAY_GIAI_NGAN', 'NGAY_DAO_HAN', 'NGAY_TT', 'LOAI_TIEN_HD']
        df_tt['GIAI_NGAN_TT'] = 'T·∫•t to√°n'
        df_tt['NGAY'] = pd.to_datetime(df_tt['NGAY_TT'], errors='coerce')
        df_tt['CIF'] = df_tt['CIF'].astype(str).str.strip()


        df_gn = df_gn_raw[['CIF', 'TEN_KHACH_HANG', 'KHE_UOC', 'SO_TIEN_GIAI_NGAN_VND', 'NGAY_GIAI_NGAN', 'NGAY_DAO_HAN', 'LOAI_TIEN_HD']].copy()
        df_gn['GIAI_NGAN_TT'] = 'Gi·∫£i ng√¢n'
        df_gn['NGAY_GIAI_NGAN'] = pd.to_datetime(df_gn['NGAY_GIAI_NGAN'], format='%Y%m%d', errors='coerce')
        df_gn['NGAY_DAO_HAN'] = pd.to_datetime(df_gn['NGAY_DAO_HAN'], format='%Y%m%d', errors='coerce')
        df_gn['NGAY'] = df_gn['NGAY_GIAI_NGAN']
        df_gn['CIF'] = df_gn['CIF'].astype(str).str.strip()


        df_gop = pd.concat([df_tt, df_gn], ignore_index=True)
        df_gop = df_gop[df_gop['NGAY'].notna()]
        df_gop = df_gop.sort_values(by=['CIF', 'NGAY', 'GIAI_NGAN_TT'])

        df_count = df_gop.groupby(['CIF', 'NGAY', 'GIAI_NGAN_TT']).size().unstack(fill_value=0).reset_index()
        if 'Gi·∫£i ng√¢n' not in df_count.columns: df_count['Gi·∫£i ng√¢n'] = 0
        if 'T·∫•t to√°n' not in df_count.columns: df_count['T·∫•t to√°n'] = 0
        df_count['CO_CA_GN_VA_TT'] = ((df_count['Gi·∫£i ng√¢n'] > 0) & (df_count['T·∫•t to√°n'] > 0)).astype(int)
        
        ds_ca_gn_tt_series = df_count[df_count['CO_CA_GN_VA_TT'] == 1]['CIF']
        ds_ca_gn_tt = ds_ca_gn_tt_series.astype(str).str.strip().unique()

        pivot_full['KH c√≥ c·∫£ GNG v√† TT trong 1 ng√†y'] = pivot_full['CIF_KH_VAY'].apply(
            lambda x: 'x' if x in ds_ca_gn_tt else ''
        )
    else:
        pivot_full['KH c√≥ c·∫£ GNG v√† TT trong 1 ng√†y'] = ''
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu M·ª•c 55 ho·∫∑c M·ª•c 56 ƒë·ªÉ x·ª≠ l√Ω giao d·ªãch gi·∫£i ng√¢n/t·∫•t to√°n.")


    # X·ª≠ l√Ω ch·∫≠m tr·∫£
    df_delay_processed = pd.DataFrame() 
    if df_delay_data is not None:
        df_delay = df_delay_data.copy()
        # ƒê·∫£m b·∫£o c·ªôt CIF_ID t·ªìn t·∫°i v√† l√† string trong df_delay
        if 'CIF_ID' not in df_delay.columns and 'CUSTSEQLN' in df_delay.columns: # Gi·∫£ s·ª≠ c√≥ th·ªÉ l√† CUSTSEQLN
             df_delay.rename(columns={'CUSTSEQLN': 'CIF_ID'}, inplace=True)
        
        if 'CIF_ID' in df_delay.columns:
            df_delay['CIF_ID'] = df_delay['CIF_ID'].astype(str).str.strip()
            df_delay['NGAY_DEN_HAN_TT'] = pd.to_datetime(df_delay['NGAY_DEN_HAN_TT'], errors='coerce')
            df_delay['NGAY_THANH_TOAN'] = pd.to_datetime(df_delay['NGAY_THANH_TOAN'], errors='coerce')
            ngay_danh_gia_cham_tra = pd.to_datetime("2025-03-31") 
            df_delay['NGAY_THANH_TOAN_FILL'] = df_delay['NGAY_THANH_TOAN'].fillna(ngay_danh_gia_cham_tra)
            df_delay['SO_NGAY_CHAM_TRA'] = (df_delay['NGAY_THANH_TOAN_FILL'] - df_delay['NGAY_DEN_HAN_TT']).dt.days
            
            mask_period = df_delay['NGAY_DEN_HAN_TT'].dt.year.between(2023, 2025) 
            df_delay = df_delay[mask_period & df_delay['NGAY_DEN_HAN_TT'].notna()]


            pivot_full_temp_for_delay = pivot_full[['CIF_KH_VAY', 'D∆Ø N·ª¢', 'NHOM_NO']].rename(columns={'CIF_KH_VAY': 'CIF_ID'})
            # ƒê·∫£m b·∫£o CIF_ID trong pivot_full_temp_for_delay c≈©ng l√† string (ƒë√£ l√†m cho pivot_full['CIF_KH_VAY'])
            pivot_full_temp_for_delay['CIF_ID'] = pivot_full_temp_for_delay['CIF_ID'].astype(str).str.strip()
            
            df_delay = df_delay.merge(pivot_full_temp_for_delay, on='CIF_ID', how='left')
            
            # NHOM_NO t·ª´ pivot_full c√≥ th·ªÉ l√† string (vd '1.0', '2'), c·∫ßn chu·∫©n h√≥a tr∆∞·ªõc khi so s√°nh
            df_delay['NHOM_NO'] = pd.to_numeric(df_delay['NHOM_NO'], errors='coerce') # Chuy·ªÉn v·ªÅ s·ªë ƒë·ªÉ so s√°nh
            df_delay = df_delay[df_delay['NHOM_NO'] == 1.0] 

            def cap_cham_tra(days):
                if pd.isna(days): return None
                if days >= 10: return '>=10'
                if days >= 4: return '4-9'
                if days > 0: return '<4'
                return None
            df_delay['CAP_CHAM_TRA'] = df_delay['SO_NGAY_CHAM_TRA'].apply(cap_cham_tra)

            df_delay['NGAY_DEN_HAN_TT_DATE'] = df_delay['NGAY_DEN_HAN_TT'].dt.date 
            df_delay.sort_values(['CIF_ID', 'NGAY_DEN_HAN_TT_DATE', 'CAP_CHAM_TRA'],
                                key=lambda s: s.map({'>=10':0, '4-9':1, '<4':2, None: 3}) if s.name == 'CAP_CHAM_TRA' else s,
                                inplace=True, na_position='last')
            df_unique_delay = df_delay.drop_duplicates(subset=['CIF_ID', 'NGAY_DEN_HAN_TT_DATE'], keep='first')

            df_dem_delay = df_unique_delay.groupby(['CIF_ID', 'CAP_CHAM_TRA']).size().unstack(fill_value=0)
            
            df_dem_delay['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y'] = np.where(df_dem_delay.get('>=10', 0) > 0, 'x', '')
            df_dem_delay['KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y'] = np.where(
                (df_dem_delay.get('>=10', 0) == 0) & (df_dem_delay.get('4-9', 0) > 0), 'x', ''
            )
            pivot_full = pivot_full.merge(
                df_dem_delay[['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y', 'KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y']],
                left_on='CIF_KH_VAY', right_index=True, how='left' # right_index=True v√¨ df_dem_delay c√≥ CIF_ID l√† index
            )
            pivot_full[['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y', 'KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y']] = \
                pivot_full[['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y', 'KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y']].fillna('')
            df_delay_processed = df_delay 
        else:
            st.warning("C·ªôt 'CIF_ID' kh√¥ng t√¨m th·∫•y trong d·ªØ li·ªáu M·ª•c 57 (ch·∫≠m tr·∫£). B·ªè qua x·ª≠ l√Ω ch·∫≠m tr·∫£.")
            pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y'] = ''
            pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y'] = ''
    else:
        pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ > 10 ng√†y'] = ''
        pivot_full['KH Ph√°t sinh ch·∫≠m tr·∫£ 4-9 ng√†y'] = ''
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu M·ª•c 57 (ch·∫≠m tr·∫£) ƒë·ªÉ x·ª≠ l√Ω.")


    return (pivot_full, df_crm4_filtered, pivot_final, pivot_merge,
            df_crm32_filtered, pivot_mucdich, df_delay_processed, df_gop, df_count, df_bds_matched)


# --- Giao di·ªán Streamlit ---
st.title("·ª®ng d·ª•ng x·ª≠ l√Ω d·ªØ li·ªáu CRM v√† t·∫°o b√°o c√°o")

with st.sidebar:
    st.header("T·∫£i l√™n c√°c file Excel")
    # S·ª≠ d·ª•ng key duy nh·∫•t cho m·ªói file uploader
    uploaded_crm4_files = st.file_uploader("1. C√°c file CRM4 (Du_no_theo_tai_san_dam_bao_ALL)", type=["xls", "xlsx"], accept_multiple_files=True, key="crm4")
    uploaded_crm32_files = st.file_uploader("2. C√°c file CRM32 (RPT_CRM_32)", type=["xls", "xlsx"], accept_multiple_files=True, key="crm32")
    uploaded_muc_dich_file = st.file_uploader("3. File CODE_MDSDV4.xlsx", type="xlsx", key="m_dich")
    uploaded_code_tsbd_file = st.file_uploader("4. File CODE_LOAI TSBD.xlsx", type="xlsx", key="tsbd")
    uploaded_sol_file = st.file_uploader("5. File MUC 17.xlsx (D·ªØ li·ªáu SOL)", type="xlsx", key="sol")
    uploaded_giai_ngan_file = st.file_uploader("6. File Giai_ngan_tien_mat_1_ty (ho·∫∑c t∆∞∆°ng t·ª±)", type=["xls","xlsx"], key="giai_ngan") # S·ª≠a t√™n g·ª£i √Ω
    uploaded_55_file = st.file_uploader("7. File Muc55 (T·∫•t to√°n).xlsx", type="xlsx", key="muc55")
    uploaded_56_file = st.file_uploader("8. File Muc56 (Gi·∫£i ng√¢n).xlsx", type="xlsx", key="muc56")
    uploaded_delay_file = st.file_uploader("9. File Muc57 (Ch·∫≠m tr·∫£).xlsx", type="xlsx", key="delay")

    st.header("Th√¥ng s·ªë t√πy ch·ªçn")
    chi_nhanh_input = st.text_input("Nh·∫≠p t√™n chi nh√°nh ho·∫∑c m√£ SOL (v√≠ d·ª•: HANOI ho·∫∑c 001):", key="chi_nhanh_val").strip().upper()
    dia_ban_kt_input = st.text_input("Nh·∫≠p t·ªânh/th√†nh ki·ªÉm to√°n (v√≠ d·ª•: B·∫°c Li√™u):", key="dia_ban_val").strip().lower()


if st.button("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu", key="process_button"):
    # Ki·ªÉm tra t·∫•t c·∫£ c√°c file c·∫ßn thi·∫øt ƒë√£ ƒë∆∞·ª£c t·∫£i l√™n ch∆∞a
    # Cho ph√©p m·ªôt s·ªë file kh√¥ng b·∫Øt bu·ªôc n·∫øu logic c√≥ th·ªÉ x·ª≠ l√Ω (v√≠ d·ª•: df_giai_ngan_data, df_sol_data)
    required_files_present = all([
        uploaded_crm4_files, uploaded_crm32_files, uploaded_muc_dich_file, 
        uploaded_code_tsbd_file, 
        # uploaded_sol_file, # C√≥ th·ªÉ kh√¥ng b·∫Øt bu·ªôc v·ªõi m·ªçi tr∆∞·ªùng h·ª£p
        # uploaded_giai_ngan_file, 
        uploaded_55_file, uploaded_56_file, uploaded_delay_file
    ])

    if not required_files_present:
        st.error("Vui l√≤ng t·∫£i l√™n c√°c file CRM4, CRM32, CODE_MDSDV4, CODE_LOAI_TSBD, Muc55, Muc56, Muc57.")
    elif not chi_nhanh_input:
        st.error("Vui l√≤ng nh·∫≠p t√™n chi nh√°nh ho·∫∑c m√£ SOL.")
    else:
        with st.spinner("‚è≥ ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu... Vui l√≤ng ch·ªù."):
            df_crm4_raw = load_multiple_excel(uploaded_crm4_files)
            df_crm32_raw = load_multiple_excel(uploaded_crm32_files)
            df_muc_dich_data = load_excel(uploaded_muc_dich_file)
            df_code_tsbd_data = load_excel(uploaded_code_tsbd_file)
            df_sol_data = load_excel(uploaded_sol_file) # V·∫´n load nh∆∞ng c√≥ th·ªÉ l√† None
            df_giai_ngan_data = load_excel(uploaded_giai_ngan_file) # V·∫´n load
            df_55_data = load_excel(uploaded_55_file)
            df_56_data = load_excel(uploaded_56_file)
            df_delay_data = load_excel(uploaded_delay_file)

            # Ki·ªÉm tra c√°c file b·∫Øt bu·ªôc sau khi load
            if df_crm4_raw is None or df_crm32_raw is None or \
               df_muc_dich_data is None or df_code_tsbd_data is None or \
               df_55_data is None or df_56_data is None or df_delay_data is None:
                st.error("M·ªôt ho·∫∑c nhi·ªÅu file b·∫Øt bu·ªôc kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c. Vui l√≤ng ki·ªÉm tra l·∫°i file ƒë√£ t·∫£i l√™n.")
            else:
                try:
                    results = process_crm_data(
                        df_crm4_raw, df_crm32_raw, df_muc_dich_data, df_code_tsbd_data,
                        df_sol_data, df_giai_ngan_data, df_55_data, df_56_data, df_delay_data,
                        chi_nhanh_input, dia_ban_kt_input
                    )

                    if results:
                        (pivot_full_res, df_crm4_filtered_res, pivot_final_res, pivot_merge_res,
                        df_crm32_filtered_res, pivot_mucdich_res, df_delay_res, df_gop_res,
                        df_count_res, df_bds_matched_res) = results

                        st.success("üéâ X·ª≠ l√Ω d·ªØ li·ªáu ho√†n t·∫•t!")

                        st.subheader("Xem tr∆∞·ªõc k·∫øt qu·∫£ ch√≠nh (KQ_KH - pivot_full)")
                        if pivot_full_res is not None and not pivot_full_res.empty:
                            st.dataframe(pivot_full_res.head())
                        else:
                            st.warning("B·∫£ng k·∫øt qu·∫£ ch√≠nh (pivot_full) r·ªóng.")


                        # Chu·∫©n b·ªã file Excel ƒë·ªÉ t·∫£i xu·ªëng
                        output = BytesIO()
                        with pd.ExcelWriter(output, engine='openpyxl') as writer:
                            if df_crm4_filtered_res is not None and not df_crm4_filtered_res.empty: df_crm4_filtered_res.to_excel(writer, sheet_name='df_crm4_LOAI_TS', index=False)
                            if pivot_final_res is not None and not pivot_final_res.empty: pivot_final_res.to_excel(writer, sheet_name='KQ_CRM4', index=False)
                            if pivot_merge_res is not None and not pivot_merge_res.empty: pivot_merge_res.to_excel(writer, sheet_name='Pivot_crm4', index=False)
                            if df_crm32_filtered_res is not None and not df_crm32_filtered_res.empty: df_crm32_filtered_res.to_excel(writer, sheet_name='df_crm32_MUC_DICH', index=False) 
                            if pivot_full_res is not None and not pivot_full_res.empty: pivot_full_res.to_excel(writer, sheet_name='KQ_KH', index=False)
                            if pivot_mucdich_res is not None and not pivot_mucdich_res.empty: pivot_mucdich_res.to_excel(writer, sheet_name='Pivot_crm32', index=False)
                            if df_delay_res is not None and not df_delay_res.empty : df_delay_res.to_excel(writer, sheet_name='tieu chi 4 (cham tra)', index=False)
                            if df_gop_res is not None and not df_gop_res.empty: df_gop_res.to_excel(writer, sheet_name='tieu chi 3 (gop GN TT)', index=False)
                            if df_count_res is not None and not df_count_res.empty: df_count_res.to_excel(writer, sheet_name='tieu chi 3 (dem GN TT)', index=False)
                            if df_bds_matched_res is not None and not df_bds_matched_res.empty: df_bds_matched_res.to_excel(writer, sheet_name='tieu chi 2 (BDS khac DB)', index=False)
                        
                        excel_data = output.getvalue()

                        if excel_data: # Ch·ªâ hi·ªÉn th·ªã n√∫t download n·∫øu c√≥ d·ªØ li·ªáu
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng file Excel k·∫øt qu·∫£ (KQ_XuLy.xlsx)",
                                data=excel_data,
                                file_name="KQ_XuLy_CRM.xlsx", 
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                            st.balloons()
                        else:
                            st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t ra file Excel.")
                    else:
                        st.error("X·ª≠ l√Ω d·ªØ li·ªáu kh√¥ng th√†nh c√¥ng ho·∫∑c kh√¥ng c√≥ k·∫øt qu·∫£ tr·∫£ v·ªÅ.")
                except Exception as e:
                    st.error(f"ƒê√£ x·∫£y ra l·ªói nghi√™m tr·ªçng trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
                    st.exception(e) # In traceback chi ti·∫øt ƒë·ªÉ debug
else:
    st.info("‚ÑπÔ∏è Vui l√≤ng t·∫£i l√™n c√°c file c·∫ßn thi·∫øt v√† nh·∫≠p th√¥ng tin ·ªü thanh b√™n, sau ƒë√≥ nh·∫•n n√∫t 'B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ªØ li·ªáu'.")

